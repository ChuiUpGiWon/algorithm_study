from collections import deque

def bfs(start,end,maps):
    dx = [0,0,1,-1]
    dy = [1,-1,0,0]
    
    n = len(maps) #세로 길이
    m = len(maps[0]) #가로 길이
    
    visited = [[0] * m for _ in range(n)]
    q = deque()
    flag = False
    
    for i in range(n):
        for j in range(m):
            if maps[i][j] == start:
                q.append((i,j,0))
                visited[i][j] = 1
                flag = True
                break
        if flag:
            break
    while q:
        y,x,cost = q.popleft()
        
        if maps[y][x] == end:
            return cost
            
        for t in range(4):
            nx = x + dx[t]
            ny = y + dy[t]
            
            if 0 <= ny < n and 0 <= nx < m and maps[ny][nx] != 'X':
                if visited[ny][nx] == 0:
                    q.append((ny,nx,cost+1))
                    visited[ny][nx] = 1
    return -1

def solution(maps):
    answer = 0
    to_lever = bfs('S','L',maps)
    to_end = bfs('L','E',maps)
    
    if to_lever != -1 and to_end != -1:
        return to_lever + to_end
    
    return -1
